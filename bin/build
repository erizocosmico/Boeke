#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
import os
import sys
import subprocess
import string
import random

def display_help():
    print("""
Boeke build

Argumentos:

  --MAMP         Usar si estás usando MAMP.
  --test         Instala una base de datos de pruebas. Si --fill y --test no están habilitados se creará una de producción.
  --fill         Rellena la base de datos con datos de prueba.
  --user=[user]  Nombre de un usuario con privilegios de root
  --pass=[pass]  Contraseña del usuario
     
Ejemplo: build --test --fill --user=root --pass=root""")

def generate_password():
    password = ''
    for i in xrange(25):
        password += random.choice(string.ascii_letters + string.digits + '_-#%&/()')
    return password

def main():
    CURRENT_DIR = os.path.dirname(os.path.realpath(__file__))
    SCHEMA_DIR = CURRENT_DIR  + '/db_schema.sql'
    TESTDATA_DIR = CURRENT_DIR  + '/test_data.sql'
    MAMP = False
    DB_CREATED = False
    OPTIONS = 0
    USER = None
    PASS = None
    args = sys.argv[1:]
    
    if len(args) == 0 or '-h' in args or '--help' in args:
        display_help()
        sys.exit(0)
    
    for arg in args:
        if arg == '--MAMP':
            MAMP = True
    
        if arg == '--test':
            OPTIONS |= 1
    
        if arg == '--fill':
            OPTIONS |= 2
        
        if '--user=' in arg:
            USER = arg[7:]
        
        if '--pass=' in arg:
            PASS = arg[7:]
    
    cmd = "mysql" if not MAMP else "/Applications/MAMP/Library/bin/mysql"
    # Is test?
    if OPTIONS & 3 in (1, 2):
        DBNAME = 'boeke_test'
        DBUSER = 'boeke_user_test'
    # Is production
    else:
        DBNAME = 'boeke_production'
        DBUSER = 'boeke_user'
    dbuser_pass = generate_password()
        
    if not USER or not PASS:
        print("No se han proporcionado usuario y/o contraseña.")
        sys.exit(2)
        
    # Create database
    sentence = "CREATE DATABASE %s;" % DBNAME
    subprocess.call('%s -u %s --password=%s -e "%s"' % (cmd, USER, PASS, sentence),
                    shell=True)
                    
    # Create user
    sentence = "CREATE USER '%s'@'localhost' IDENTIFIED BY '%s';" % (DBUSER, dbuser_pass)
    subprocess.call('%s -u %s --password=%s -e "%s"' % (cmd, USER, PASS, sentence),
                    shell=True)
        
    # Create database schema            
    subprocess.call('%s -u %s --password=%s %s < %s' % (cmd, USER, PASS, DBNAME, SCHEMA_DIR),
                    shell=True)
                    
    # Gran permissions to the user
    sentence = "GRANT DELETE, INSERT, SELECT, UPDATE ON %s.* TO '%s'@'localhost';" % (DBNAME, DBUSER)
    subprocess.call('%s -u %s --password=%s -e "%s"' % (cmd, USER, PASS, sentence),
                    shell=True)
                    
    if OPTIONS & 2 == 2:
        # Fill database with test data          
        subprocess.call('%s -u %s --password=%s %s < %s' % (cmd, USER, PASS, DBNAME, TESTDATA_DIR),
                        shell=True)
                        
    print("Usuario:", DBUSER)
    print("Contraseña:", dbuser_pass)
        
if __name__ == '__main__':
    main()